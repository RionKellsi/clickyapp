{"ast":null,"code":"import _objectSpread from \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport artists from './artists.json';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Navtab from './components/Nav/Nav';\nimport Title from './components/Title/Title';\nimport ArtistCard from './components/ArtistCard/AristCard';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      artists: artists,\n      score: 0,\n      topScore: 0\n    };\n\n    _this.shuffleArtists = function (artists) {\n      var i = artists.length - 1;\n\n      while (i > 0) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = artists[i];\n        artists[i] = artists[j];\n        artists[j] = temp;\n        i--;\n      }\n\n      return artists;\n    };\n\n    _this.handleCorrectGuess = function (newArtist) {\n      var _this$state = _this.state,\n          topScore = _this$state.topScore,\n          score = _this$state.score;\n      var newScore = score + 1;\n      var newTopScore = Math.max(newScore, topScore);\n\n      _this.setState({\n        artist: shuffleArtists(newArtist),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.handleIncorrectguess = function (artists) {\n      _this.setState({\n        artists: _this.resetArtist(artists),\n        score: 0\n      });\n    };\n\n    _this.resetArtist = function (artists) {\n      var resetArtist = artists.map(function (item) {\n        return _objectSpread({}, item, {\n          clicked: false\n        });\n      });\n      return _this.shuffleArtists(resetArtist);\n    };\n\n    _this.handleItemClick = function (id) {\n      var guessedCorrectly = false;\n\n      var newArtist = _this.state.artists.map(function (item) {\n        var newItem = _objectSpread({}, item);\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n\n      guessedCorrectly ? _this.handleCorrectGuess(newArtist) : _this.handleIncorrectguess(newArtist);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        artists: this.shuffleArtists(this.state.artists)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Navtab, {\n        message: this.state.message,\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), this.state.artists.map(function (artists) {\n        return React.createElement(ArtistCard, {\n          artist: artists.artist,\n          image: artists.image,\n          key: artists.id,\n          id: artists.id,\n          shake: !_this2.state.score && _this2.state.topScore,\n          handleClick: _this2.handleItemClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // class App extends Component {\n//   state = {\n//     artists,\n//     message: \"Click on an image to begin!\",\n//     topScore: 0,\n//     curScore: 0,\n//     clickedArray: [],\n//     unselectedArtists: artists\n//   };\n//   componentDidMount(){\n//   }\n//   //create a function to shuffle the array \n//   shuffleArray = array => {\n//   };\n//       // const arrLength = array.length\n//       // const shuffledArray = []\n//       // while(array.length) {\n//       //   const randomIndex = Math.floor(Math.random() * (i + 1))\n//       //   // get random number between 0 and length of array\n//       //   // pop item from current array\n//       //   // put into 'shufffledArray' using random index (ex: shuffledArray[randomIndex] = popped item)\n//       // }\n//       // // return shuffledArray\n//       // console.log(array);\n//       // return array;\n//   selectArtist = artists => {\n//     const findArtist = this.state.unselectedArtists.find(item => item.artists === artists);\n//     if (findArtist === undefined) {\n//       //fail to select artist\n//       this.setState({\n//         message: \"You guessed incorrectly!\",\n//         topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\n//         curScore: 0,\n//         artists: artists,\n//         unselectedArtists: artists\n//       });\n//     }\n//     else {\n//       const newArtists = this.state.unselectedArtists.filter(item => item.artists !== artists);\n//       this.setState({\n//         message: \"You guessed correctly!\",\n//         curScore: this.state.curScore + 1,\n//         artists: artists,\n//         unselectedArtists: newArtists\n//       });\n//     }\n//     const shuffledArtist = this.shuffleArray(artists);\n//     return shuffledArtist;\n//   };\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Navtab \n//           message={this.state.message}\n//           curScore={this.state.curScore}\n//           topScore={this.state.topScore}\n//         />\n//         <Title />\n//         {this.state.artists.map(artists => (\n//             <ArtistCard\n//               artist={artists.artist}\n//               image={artists.image}\n//               selectArtist={this.selectArtist}\n//               curScore={this.state.curScore}\n//               />\n//           ))\n//         }\n//       </Wrapper>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/rionirvin/Documents/FullStackCourse/workingfolder/clickyapp/src/App.js"],"names":["React","Component","artists","Wrapper","Navtab","Title","ArtistCard","App","state","score","topScore","shuffleArtists","i","length","j","Math","floor","random","temp","handleCorrectGuess","newArtist","newScore","newTopScore","max","setState","artist","handleIncorrectguess","resetArtist","map","item","clicked","handleItemClick","id","guessedCorrectly","newItem","message","image"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;;IAGMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNN,MAAAA,OAAO,EAAPA,OADM;AAENO,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,K;;UAYRC,c,GAAiB,UAAAT,OAAO,EAAI;AAC1B,UAAIU,CAAC,GAAGV,OAAO,CAACW,MAAR,GAAiB,CAAzB;;AACA,aAAOD,CAAC,GAAG,CAAX,EAAc;AACZ,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,YAAMM,IAAI,GAAGhB,OAAO,CAACU,CAAD,CAApB;AACAV,QAAAA,OAAO,CAACU,CAAD,CAAP,GAAaV,OAAO,CAACY,CAAD,CAApB;AACAZ,QAAAA,OAAO,CAACY,CAAD,CAAP,GAAaI,IAAb;AACAN,QAAAA,CAAC;AACF;;AACD,aAAOV,OAAP;AACD,K;;UAGDiB,kB,GAAqB,UAAAC,SAAS,EAAI;AAAA,wBACJ,MAAKZ,KADD;AAAA,UACxBE,QADwB,eACxBA,QADwB;AAAA,UACdD,KADc,eACdA,KADc;AAEhC,UAAMY,QAAQ,GAAGZ,KAAK,GAAG,CAAzB;AACA,UAAMa,WAAW,GAAGP,IAAI,CAACQ,GAAL,CAASF,QAAT,EAAmBX,QAAnB,CAApB;;AAEA,YAAKc,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAEd,cAAc,CAACS,SAAD,CADV;AAEZX,QAAAA,KAAK,EAAEY,QAFK;AAGZX,QAAAA,QAAQ,EAAEY;AAHE,OAAd;AAKD,K;;UAEDI,oB,GAAuB,UAAAxB,OAAO,EAAI;AAChC,YAAKsB,QAAL,CAAc;AACZtB,QAAAA,OAAO,EAAE,MAAKyB,WAAL,CAAiBzB,OAAjB,CADG;AAEZO,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,K;;UAEDkB,W,GAAc,UAAAzB,OAAO,EAAI;AACvB,UAAMyB,WAAW,GAAGzB,OAAO,CAAC0B,GAAR,CAAY,UAAAC,IAAI;AAAA,iCAAUA,IAAV;AAAgBC,UAAAA,OAAO,EAAE;AAAzB;AAAA,OAAhB,CAApB;AACA,aAAO,MAAKnB,cAAL,CAAoBgB,WAApB,CAAP;AACD,K;;UAGDI,e,GAAkB,UAAAC,EAAE,EAAI;AACtB,UAAIC,gBAAgB,GAAG,KAAvB;;AACA,UAAMb,SAAS,GAAG,MAAKZ,KAAL,CAAWN,OAAX,CAAmB0B,GAAnB,CAAuB,UAAAC,IAAI,EAAI;AAC/C,YAAMK,OAAO,qBAAQL,IAAR,CAAb;;AACA,YAAIK,OAAO,CAACF,EAAR,KAAeA,EAAnB,EAAuB;AACrB,cAAI,CAACE,OAAO,CAACJ,OAAb,EAAsB;AACpBI,YAAAA,OAAO,CAACJ,OAAR,GAAkB,IAAlB;AACAG,YAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AACD,eAAOC,OAAP;AACD,OATiB,CAAlB;;AAUAD,MAAAA,gBAAgB,GACZ,MAAKd,kBAAL,CAAwBC,SAAxB,CADY,GAEZ,MAAKM,oBAAL,CAA0BN,SAA1B,CAFJ;AAGD,K;;;;;;;wCA1DmB;AAClB,WAAKI,QAAL,CAAc;AAAEtB,QAAAA,OAAO,EAAE,KAAKS,cAAL,CAAoB,KAAKH,KAAL,CAAWN,OAA/B;AAAX,OAAd;AAED;;;6BAwDQ;AAAA;;AACP,aACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE,KAAKM,KAAL,CAAW2B,OADtB;AAEE,QAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWC,KAFpB;AAGE,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,QAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAQE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,EAUG,KAAKF,KAAL,CAAWN,OAAX,CAAmB0B,GAAnB,CAAuB,UAAA1B,OAAO;AAAA,eAC7B,oBAAC,UAAD;AACE,UAAA,MAAM,EAAEA,OAAO,CAACuB,MADlB;AAEE,UAAA,KAAK,EAAEvB,OAAO,CAACkC,KAFjB;AAGE,UAAA,GAAG,EAAElC,OAAO,CAAC8B,EAHf;AAIE,UAAA,EAAE,EAAE9B,OAAO,CAAC8B,EAJd;AAKE,UAAA,KAAK,EAAE,CAAC,MAAI,CAACxB,KAAL,CAAWC,KAAZ,IAAqB,MAAI,CAACD,KAAL,CAAWE,QALzC;AAME,UAAA,WAAW,EAAE,MAAI,CAACqB,eANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD6B;AAAA,OAA9B,CAVH,CADF;AA0BD;;;;EA/Fe9B,S;;AAoGlB,eAAeM,GAAf,C,CAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport artists from './artists.json';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Navtab from './components/Nav/Nav';\nimport Title from './components/Title/Title';\nimport ArtistCard from './components/ArtistCard/AristCard';\n\n\nclass App extends Component {\n\n  state = {\n    artists,\n    score: 0,\n    topScore: 0\n\n  };\n\n  componentDidMount() {\n    this.setState({ artists: this.shuffleArtists(this.state.artists) });\n\n  };\n\n  shuffleArtists = artists => {\n    let i = artists.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = artists[i];\n      artists[i] = artists[j];\n      artists[j] = temp;\n      i--;\n    }\n    return artists;\n  };\n\n\n  handleCorrectGuess = newArtist => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      artist: shuffleArtists(newArtist),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectguess = artists => {\n    this.setState({\n      artists: this.resetArtist(artists),\n      score: 0\n    });\n  };\n\n  resetArtist = artists => {\n    const resetArtist = artists.map(item => ({ ...item, clicked: false }));\n    return this.shuffleArtists(resetArtist);\n  };\n\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newArtist = this.state.artists.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    })\n    guessedCorrectly\n      ? this.handleCorrectGuess(newArtist)\n      : this.handleIncorrectguess(newArtist);\n  };\n  render() {\n    return (\n      <Wrapper>\n\n        <Navtab\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        <Title />\n\n        {this.state.artists.map(artists => (\n          <ArtistCard\n            artist={artists.artist}\n            image={artists.image}\n            key={artists.id}\n            id={artists.id}\n            shake={!this.state.score && this.state.topScore}\n            handleClick={this.handleItemClick}\n          />\n        ))\n        }\n\n      </Wrapper>\n\n    );\n  }\n  \n\n}\n\nexport default App;\n\n\n\n\n\n\n// class App extends Component {\n\n//   state = {\n//     artists,\n//     message: \"Click on an image to begin!\",\n//     topScore: 0,\n//     curScore: 0,\n//     clickedArray: [],\n//     unselectedArtists: artists\n//   };\n\n//   componentDidMount(){\n\n//   }\n\n//   //create a function to shuffle the array \n\n//   shuffleArray = array => {\n\n//   };\n\n//       // const arrLength = array.length\n//       // const shuffledArray = []\n\n//       // while(array.length) {\n\n//       //   const randomIndex = Math.floor(Math.random() * (i + 1))\n//       //   // get random number between 0 and length of array\n//       //   // pop item from current array\n//       //   // put into 'shufffledArray' using random index (ex: shuffledArray[randomIndex] = popped item)\n//       // }\n\n//       // // return shuffledArray\n\n//       // console.log(array);\n//       // return array;\n\n\n\n\n//   selectArtist = artists => {\n//     const findArtist = this.state.unselectedArtists.find(item => item.artists === artists);\n\n//     if (findArtist === undefined) {\n//       //fail to select artist\n\n//       this.setState({\n//         message: \"You guessed incorrectly!\",\n//         topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\n//         curScore: 0,\n//         artists: artists,\n//         unselectedArtists: artists\n//       });\n//     }\n//     else {\n//       const newArtists = this.state.unselectedArtists.filter(item => item.artists !== artists);\n\n//       this.setState({\n//         message: \"You guessed correctly!\",\n//         curScore: this.state.curScore + 1,\n//         artists: artists,\n//         unselectedArtists: newArtists\n//       });\n//     }\n\n//     const shuffledArtist = this.shuffleArray(artists);\n\n//     return shuffledArtist;\n\n//   };\n\n//   render() {\n//     return (\n//       <Wrapper>\n\n//         <Navtab \n//           message={this.state.message}\n//           curScore={this.state.curScore}\n//           topScore={this.state.topScore}\n//         />\n\n//         <Title />\n\n//         {this.state.artists.map(artists => (\n//             <ArtistCard\n//               artist={artists.artist}\n//               image={artists.image}\n//               selectArtist={this.selectArtist}\n//               curScore={this.state.curScore}\n//               />\n//           ))\n//         }\n\n//       </Wrapper>\n\n//     );\n//   }\n\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}