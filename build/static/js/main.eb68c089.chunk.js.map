{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Nav/Nav.js","components/Title/Title.js","components/ArtistCard/AristCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navtab","href","message","indexOf","style","color","curScore","Title","ArtistCard","onClick","selectArtist","artist","alt","src","image","App","state","artists","topScore","clickedArray","unselectedArtists","clickPic","id","shuffledArray","_this","shuffleArray","setState","cards","includes","score","array","undefined","find","item","newArtists","filter","_this2","this","components_Wrapper_Wrapper","Nav_Nav","components_Title_Title","map","AristCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb68c089.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Navtab = props => (\n    <div>\n        <ul className=\"nav na-tab nav-justified\">\n            <li><a href=\"/\">Music Artist Clicky Game</a></li>\n            <li \n                className={props.message.indexOf('incorrectly') !== -1 ?\n                    \"desc-incorrect\" : \n                    props.message.indexOf('correctly') !== -1 ?\n                        \"desc-correct\" : \n                        \"desc-normal\"} >\n\n                            {props.message}\n                        </li>\n\n                        <li>Score: <span style={{color: \"pink\"}}>{props.curScore}</span></li>\n        </ul>\n    </div>\n);\n\nexport default Navtab;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => (\n    <div className=\"titlebox\">\n        <h1>Music Artist Clicky Game</h1>\n        <p>Click on an image to earn points, but don't click more than once</p>\n    </div>\n);\n\nexport default Title;","import React from \"react\";\nimport \"./ArtistCard.css\";\n\n\n\nconst ArtistCard = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <a onClick={() => props.selectArtist(props.artist)}\n                className={props.curScore === 0 ? \"style_prevu_kit style_prevu_kit_ex\" : \"style_prevu_kit\"}\n                >\n                    <img alt={props.artist} src={props.image} />\n                </a>\n        \n        </div>\n    </div>\n);\n\nexport default ArtistCard;","import React, { Component } from 'react';\nimport './App.css';\nimport artists from './artists.json';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Navtab from './components/Nav/Nav';\nimport Title from './components/Title/Title';\nimport ArtistCard from './components/ArtistCard/AristCard';\n\n\nclass App extends Component {\n\n  state = {\n    artists,\n    message: \"Click on an image to begin!\",\n    topScore: 0,\n    curScore: 0,\n    clickedArray: [],\n    unselectedArtists: artists\n  };\n\n  clickPic = id => {\n    const shuffledArray = this.shuffleArray(artists);\n\n    this.setState({cards : shuffledArray});\n\n    if (this.state.clickedArray.includes(id)){\n      this.setState({score: 0, clickedArray: [], message: \"Incorrect!! Game Over Click an image to start again\"});\n\n    }\n  }\n\n\n\n\n\n\n  componentDidMount(){\n\n  }\n\n  //create a function to shuffle the array \n \n  shuffleArray = array => {\n\n  };\n\n      // const arrLength = array.length\n      // const shuffledArray = []\n      \n      // while(array.length) {\n        \n      //   const randomIndex = Math.floor(Math.random() * (i + 1))\n      //   // get random number between 0 and length of array\n      //   // pop item from current array\n      //   // put into 'shufffledArray' using random index (ex: shuffledArray[randomIndex] = popped item)\n      // }\n\n      // // return shuffledArray\n\n      // console.log(array);\n      // return array;\n      \n  \n\n  \n  selectArtist = artists => {\n    const findArtist = this.state.unselectedArtists.find(item => item.artists === artists);\n\n    if (findArtist === undefined) {\n      //fail to select artist\n\n      this.setState({\n        message: \"You guessed incorrectly!\",\n        topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\n        curScore: 0,\n        artists: artists,\n        unselectedArtists: artists\n      });\n    }\n    else {\n      const newArtists = this.state.unselectedArtists.filter(item => item.artists !== artists);\n\n      this.setState({\n        message: \"You guessed correctly!\",\n        curScore: this.state.curScore + 1,\n        artists: artists,\n        unselectedArtists: newArtists\n      });\n    }\n\n    const shuffledArtist = this.shuffleArray(artists);\n\n    return shuffledArtist;\n    \n  };\n\n  render() {\n    return (\n      <Wrapper>\n        \n        <Navtab \n          message={this.state.message}\n          curScore={this.state.curScore}\n          topScore={this.state.topScore}\n        />\n\n        <Title />\n\n        {this.state.artists.map(artists => (\n            <ArtistCard\n              artist={artists.artist}\n              image={artists.image}\n              selectArtist={this.selectArtist}\n              curScore={this.state.curScore}\n              />\n          ))\n        }\n\n      </Wrapper>\n        \n    );\n  }\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}