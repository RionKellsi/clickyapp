{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Nav/Nav.js","components/Title/Title.js","components/ArtistCard/AristCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navtab","href","style","color","score","topScore","Title","ArtistCard","onClick","shuffleArtists","alt","artist","src","image","App","state","artists","i","length","j","Math","floor","random","temp","_this","setState","handleCorrectGuess","newArtist","_this$state","newScore","newTopScore","max","handleIncorrectguess","resetArtist","map","item","Object","objectSpread","clicked","handleItemClick","id","guessedCorrectly","newItem","this","_this2","components_Wrapper_Wrapper","Nav_Nav","components_Title_Title","AristCard","key","shake","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d4e5e5a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Navtab = props => (\n    <div>\n        <ul className=\"nav nav-tab nav-justified\">\n            <li><a href=\"/\">Music Artist Clicky Game</a></li>\n            <li>Score: <span style={{color: \"yellow\"}}> { props.score } </span></li>\n            <li>|</li>\n            <li>Top Score: <span style={{color: \"yellow\"}}> { props.topScore } </span></li>\n        </ul>\n    </div>\n);\n\nexport default Navtab;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => (\n    <div className=\"titlebox\">\n        <h1>Music Artist Clicky Game</h1>\n        <p>Click on an image to earn points, but don't click more than once</p>\n    </div>\n);\n\nexport default Title;","import React from \"react\";\nimport \"./ArtistCard.css\";\n\nconst ArtistCard = props => (\n   \n\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <a onClick={() => props.shuffleArtists()}\n                className={props.score === 0 ? \"style_prevu_kit style_prevu_kit_ex\" : \"style_prevu_kit\"}\n                >\n                    <img alt={props.artist} src={props.image} />\n                </a>\n        \n        </div>\n    </div>\n);\n\nexport default ArtistCard;","import React, { Component } from 'react';\nimport './App.css';\nimport artists from './artists.json';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Navtab from './components/Nav/Nav';\nimport Title from './components/Title/Title';\nimport ArtistCard from './components/ArtistCard/AristCard';\n\n\nclass App extends Component {\n\n  state = {\n    artists,\n    score: 0,\n    topScore: 0\n\n  };\n\n  componentDidMount() {\n    this.shuffleArtists()\n  };\n\n  shuffleArtists= () => {\n    let i = artists.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = artists[i];\n      artists[i] = artists[j];\n      artists[j] = temp;\n      i--;\n    }\n    this.setState({artists: artists})\n  };\n\n\n  handleCorrectGuess = newArtist => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      artist: this.shuffleArtists(newArtist),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectguess = artists => {\n    this.setState({\n      artists: this.resetArtist(artists),\n      score: 0\n    });\n  };\n\n  resetArtist = artists => {\n    const resetArtist = artists.map(item => ({ ...item, clicked: false }));\n    return this.shuffleArtists(resetArtist);\n  };\n\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newArtist = this.state.artists.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    })\n    guessedCorrectly\n      ? this.handleCorrectGuess(newArtist)\n      : this.handleIncorrectguess(newArtist);\n  };\n\n\n  render() {\n    return (\n      <div>\n      <Wrapper>\n\n        <Navtab\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n\n        <Title />\n\n        {this.state.artists.map(artists => (\n          <ArtistCard\n            artist={artists.artist}\n            image={artists.image}\n            key={artists.id}\n            id={artists.id}\n            shuffleArtists={this.shuffleArtists}\n            shake={!this.state.score && this.state.topScore}\n            handleClick={this.handleItemClick}\n            \n          />\n        ))\n        }\n\n      </Wrapper>\n      </div>\n    );\n  }\n  \n\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}